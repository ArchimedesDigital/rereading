{"version":3,"sources":["App.js","instructor_data_view.js","index.js"],"names":["Question","props","react_default","a","createElement","className","question","onSubmit","Form_default","Control","type","value","answer","onChange","Navbar_default","fixed","Button_default","variant","onClick","goBack","size","block","Story","context","story","WordAlert","word_alert","Alert_default","Study","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contexts","questions","context_number","question_number","answers","finished","start","textInput","views","show_story","fetch","json","setState","console","log","_context","t0","data","student_responses","JSON","stringify","method","body","headers","Content-type","then","res","response","catch","err","e","target","word_limit","trim","split","length","preventDefault","slice","validateSubmission","text","push","_this2","handleStartClick","postData","toggleStory","handleFormChange","handleSubmit","React","Component","Student","responses","map","Response","key","id","Table_default","striped","bordered","hover","responsive","InstructorPage","students","loaded","student","routing","react_router_dom","react_router","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f24e3ad1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\n// const list = [\r\n//     {\r\n//         id: 0,\r\n//         story: 'Baby shoes. Never worn.',\r\n//         contexts: ['This is an ad.', 'This is a story.'],\r\n//         questions: [\r\n//             {\r\n//                 text: 'In one word or less, how did this make you feel?',\r\n//                 word_limit: 1,\r\n//             },\r\n//             {\r\n//                 text: 'In three words or less, what is this story about?',\r\n//                 word_limit: 3,\r\n//             },\r\n//         ],\r\n//     },\r\n// ];\r\n\r\nfunction Question(props) {\r\n    return (\r\n        <div className={'question'}>\r\n            <div className={'question-prompt'}>{props.question}</div>\r\n            <form onSubmit={props.onSubmit}>\r\n                <label>\r\n                    <Form.Control type={'text'} value={props.answer} onChange={props.onChange} />\r\n                </label>\r\n                <Navbar fixed={'bottom'}>\r\n                    <Button variant='secondary' onClick={props.goBack} size='lg' block>Go back to story</Button>\r\n                    <Button variant='primary' type='submit' size='lg' block>Continue</Button>\r\n                </Navbar>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Story(props) {\r\n    return (\r\n        <div className='story'>\r\n            <div className={'context-text'}>{props.context}</div>\r\n            <div className={'story-text'}>{props.story}</div>\r\n            <Navbar fixed={'bottom'}>\r\n                <Button variant='secondary' onClick={props.onClick} size='lg' block>Continue</Button>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction WordAlert(props) {\r\n\r\n    if (props.word_alert) {\r\n        return (\r\n            <div className='word-alert'>\r\n                <Alert variant='danger'>\r\n                    Please make sure to enter a response and respect word limits\r\n                </Alert>\r\n            </div>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nclass Study extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            story: null,\r\n            contexts: [],\r\n            questions: [],\r\n            context_number: 0,\r\n            question_number: 0,\r\n            answers: [],\r\n            finished: false,\r\n            start: true,\r\n            textInput: '',\r\n            views: 1,\r\n            show_story: true,\r\n            word_alert: false,\r\n        };\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // Load from server\r\n\r\n        try {\r\n            const questions = await fetch('/api/');\r\n            const json = await questions.json();\r\n            this.setState(json[0]);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n        // this.setState(list[0])\r\n    }\r\n\r\n    postData() {\r\n        const url = '/api/add-response/';\r\n        const data = {\r\n            story: this.state.story,\r\n            student_responses: this.state.answers,\r\n        };\r\n\r\n        console.log(JSON.stringify(data));\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n\r\n        }).then(res => res.json()).then(response => console.log(JSON.stringify(response)))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleFormChange(e) {\r\n        this.setState({textInput: e.target.value});\r\n    }\r\n\r\n    validateSubmission(response, word_limit) {\r\n        if (!response) {\r\n            return false;\r\n        } else {\r\n            const response_list = response.trim().split(' ');\r\n            if (!(response_list.length <= word_limit)) {\r\n                return false;\r\n            } \r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        let question_number = this.state.question_number;\r\n        let context_number = this.state.context_number;\r\n        const answers = this.state.answers.slice();\r\n        const response = this.state.textInput;\r\n        let views = this.state.views;\r\n        const word_limit = this.state.questions[question_number].word_limit;\r\n        let finished = this.state.finished;\r\n        let show_story = this.state.show_story;\r\n\r\n        const isValid = this.validateSubmission(response, word_limit);\r\n        if (!isValid) {\r\n            this.setState({word_alert: true,});\r\n            return;\r\n        }\r\n\r\n        // answers[context_number][question_number] = response;\r\n        const answer = {\r\n            'context': this.state.contexts[context_number],\r\n            'question': this.state.questions[question_number].text,\r\n            response,\r\n            views,\r\n        };\r\n        answers.push(answer);\r\n        views = 1;\r\n\r\n        if (question_number < this.state.questions.length - 1) {\r\n            question_number += 1;\r\n\r\n        } else { // we're at the last question\r\n            if (context_number < this.state.contexts.length - 1) {\r\n                context_number += 1;\r\n                question_number = 0;\r\n                show_story = true;\r\n            } else { // we're at the last context\r\n                finished = true;\r\n            }\r\n        } \r\n\r\n        this.setState({\r\n            question_number,\r\n            context_number,\r\n            answers,\r\n            finished,\r\n            textInput: '',\r\n            show_story,\r\n            views,\r\n            word_alert: false,\r\n        });\r\n    }\r\n\r\n    handleStartClick() {\r\n        this.setState({start: false,})\r\n    }\r\n\r\n    toggleStory() {\r\n        const show_story = !this.state.show_story;\r\n        let views = this.state.views;\r\n        if (show_story) {\r\n            views++;\r\n        }\r\n        this.setState({\r\n            show_story,\r\n            views,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let response;\r\n\r\n        if (this.state.story) {\r\n            if (this.state.start) {\r\n                response = (\r\n                    <div className={'start'}>\r\n                        <div>Are you ready?</div>\r\n                        <Navbar fixed={'bottom'}>\r\n                            <Button variant='secondary' onClick={() => this.handleStartClick()} size='lg' block>\r\n                                Start!\r\n                            </Button>\r\n                        </Navbar>\r\n                    </div>\r\n\r\n                );\r\n\r\n            } else if (!this.state.finished) {\r\n                if (this.state.show_story) {\r\n                    response = (<Story\r\n                        story={this.state.story}\r\n                        context={this.state.contexts[this.state.context_number]}\r\n                        onClick={() => this.toggleStory()}\r\n                    />);\r\n                } else {\r\n                    response = (\r\n                        <div>\r\n                            <div><WordAlert word_alert={this.state.word_alert} /></div>\r\n                            <div>\r\n                                <Question\r\n                                    story={this.state.story}\r\n                                    context={this.state.contexts[this.state.context_number]}\r\n                                    question={this.state.questions[this.state.question_number]['text']}\r\n                                    onChange={(e) => this.handleFormChange(e)}\r\n                                    onSubmit={(e) => this.handleSubmit(e)}\r\n                                    answer={this.state.textInput}\r\n                                    goBack={() => this.toggleStory()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                this.postData();\r\n                response = <div className={'finished'}>\r\n                    Thank you for your time!\r\n                </div>;\r\n            }\r\n        } else {\r\n            response = null;\r\n        }\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\nexport default Study;\r\n\r\n","import React from 'react'\r\nimport './index.css';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nfunction Student(props) {\r\n    const responses = props.student_responses.map(response => (\r\n        <Response response={response} key={response.id}/>\r\n    ));\r\n\r\n    return (\r\n        <div className='student'>\r\n            <div><center><h1>Student #{props.id}</h1></center></div>\r\n            <div><h5><b>Story: </b> {props.story}</h5></div>\r\n            <Table striped bordered hover responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <td><b>Context</b></td>\r\n                        <td><b>Question</b></td>\r\n                        <td><b>Response</b></td>\r\n                        <td><b>Views</b></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>{responses}</tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction Response(props) {\r\n    const response = props.response;\r\n\r\n    return (\r\n        <tr>\r\n            <td>{response.context}</td>\r\n            <td>{response.question}</td>\r\n            <td>{response.response}</td>\r\n            <td>{response.views}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\n\r\nclass InstructorPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            students: [],\r\n            loaded: false,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const res = await fetch('/api/add-response/');\r\n            const students = await res.json();\r\n            this.setState({\r\n                students,\r\n                loaded: true,\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loaded) {\r\n            const students = this.state.students.map(student => (\r\n                <Student story={student.story} student_responses={student.student_responses} id={student.id} key={student.id}/>\r\n            ));\r\n\r\n            return students;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default InstructorPage;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Study from './App';\r\nimport InstructorPage from './instructor_data_view';\r\n\r\n// note(ra): for sanity testing of django-webpack-loader...\r\n// ReactDOM.render(<span>Hello, world!</span>, document.getElementById('root'));\r\n\r\nconst routing = (\r\n    <Router>\r\n        <div>\r\n            <Route path=\"/student\" component={Study} />\r\n            <Route path=\"/instructor\" component={InstructorPage} />\r\n        </div>\r\n    </Router>\r\n);\r\n\r\nReactDOM.render(routing,document.getElementById('root'));\r\n"],"sourceRoot":""}